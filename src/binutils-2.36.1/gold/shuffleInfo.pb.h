// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shuffleInfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_shuffleInfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_shuffleInfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_shuffleInfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_shuffleInfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shuffleInfo_2eproto;
namespace ShuffleInfo {
class ReorderInfo;
struct ReorderInfoDefaultTypeInternal;
extern ReorderInfoDefaultTypeInternal _ReorderInfo_default_instance_;
class ReorderInfo_BinaryInfo;
struct ReorderInfo_BinaryInfoDefaultTypeInternal;
extern ReorderInfo_BinaryInfoDefaultTypeInternal _ReorderInfo_BinaryInfo_default_instance_;
class ReorderInfo_FixupInfo;
struct ReorderInfo_FixupInfoDefaultTypeInternal;
extern ReorderInfo_FixupInfoDefaultTypeInternal _ReorderInfo_FixupInfo_default_instance_;
class ReorderInfo_FixupInfo_FixupTuple;
struct ReorderInfo_FixupInfo_FixupTupleDefaultTypeInternal;
extern ReorderInfo_FixupInfo_FixupTupleDefaultTypeInternal _ReorderInfo_FixupInfo_FixupTuple_default_instance_;
class ReorderInfo_LayoutInfo;
struct ReorderInfo_LayoutInfoDefaultTypeInternal;
extern ReorderInfo_LayoutInfoDefaultTypeInternal _ReorderInfo_LayoutInfo_default_instance_;
}  // namespace ShuffleInfo
PROTOBUF_NAMESPACE_OPEN
template<> ::ShuffleInfo::ReorderInfo* Arena::CreateMaybeMessage<::ShuffleInfo::ReorderInfo>(Arena*);
template<> ::ShuffleInfo::ReorderInfo_BinaryInfo* Arena::CreateMaybeMessage<::ShuffleInfo::ReorderInfo_BinaryInfo>(Arena*);
template<> ::ShuffleInfo::ReorderInfo_FixupInfo* Arena::CreateMaybeMessage<::ShuffleInfo::ReorderInfo_FixupInfo>(Arena*);
template<> ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* Arena::CreateMaybeMessage<::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple>(Arena*);
template<> ::ShuffleInfo::ReorderInfo_LayoutInfo* Arena::CreateMaybeMessage<::ShuffleInfo::ReorderInfo_LayoutInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ShuffleInfo {

// ===================================================================

class ReorderInfo_BinaryInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.ReorderInfo.BinaryInfo) */ {
 public:
  inline ReorderInfo_BinaryInfo() : ReorderInfo_BinaryInfo(nullptr) {}
  ~ReorderInfo_BinaryInfo() override;
  explicit constexpr ReorderInfo_BinaryInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReorderInfo_BinaryInfo(const ReorderInfo_BinaryInfo& from);
  ReorderInfo_BinaryInfo(ReorderInfo_BinaryInfo&& from) noexcept
    : ReorderInfo_BinaryInfo() {
    *this = ::std::move(from);
  }

  inline ReorderInfo_BinaryInfo& operator=(const ReorderInfo_BinaryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReorderInfo_BinaryInfo& operator=(ReorderInfo_BinaryInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReorderInfo_BinaryInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReorderInfo_BinaryInfo* internal_default_instance() {
    return reinterpret_cast<const ReorderInfo_BinaryInfo*>(
               &_ReorderInfo_BinaryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReorderInfo_BinaryInfo& a, ReorderInfo_BinaryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReorderInfo_BinaryInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReorderInfo_BinaryInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReorderInfo_BinaryInfo* New() const final {
    return CreateMaybeMessage<ReorderInfo_BinaryInfo>(nullptr);
  }

  ReorderInfo_BinaryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReorderInfo_BinaryInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReorderInfo_BinaryInfo& from);
  void MergeFrom(const ReorderInfo_BinaryInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderInfo_BinaryInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShuffleInfo.ReorderInfo.BinaryInfo";
  }
  protected:
  explicit ReorderInfo_BinaryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRandObjOffsetFieldNumber = 1,
  };
  // optional uint64 rand_obj_offset = 1;
  bool has_rand_obj_offset() const;
  private:
  bool _internal_has_rand_obj_offset() const;
  public:
  void clear_rand_obj_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 rand_obj_offset() const;
  void set_rand_obj_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_rand_obj_offset() const;
  void _internal_set_rand_obj_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:ShuffleInfo.ReorderInfo.BinaryInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 rand_obj_offset_;
  friend struct ::TableStruct_shuffleInfo_2eproto;
};
// -------------------------------------------------------------------

class ReorderInfo_LayoutInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.ReorderInfo.LayoutInfo) */ {
 public:
  inline ReorderInfo_LayoutInfo() : ReorderInfo_LayoutInfo(nullptr) {}
  ~ReorderInfo_LayoutInfo() override;
  explicit constexpr ReorderInfo_LayoutInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReorderInfo_LayoutInfo(const ReorderInfo_LayoutInfo& from);
  ReorderInfo_LayoutInfo(ReorderInfo_LayoutInfo&& from) noexcept
    : ReorderInfo_LayoutInfo() {
    *this = ::std::move(from);
  }

  inline ReorderInfo_LayoutInfo& operator=(const ReorderInfo_LayoutInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReorderInfo_LayoutInfo& operator=(ReorderInfo_LayoutInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReorderInfo_LayoutInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReorderInfo_LayoutInfo* internal_default_instance() {
    return reinterpret_cast<const ReorderInfo_LayoutInfo*>(
               &_ReorderInfo_LayoutInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReorderInfo_LayoutInfo& a, ReorderInfo_LayoutInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReorderInfo_LayoutInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReorderInfo_LayoutInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReorderInfo_LayoutInfo* New() const final {
    return CreateMaybeMessage<ReorderInfo_LayoutInfo>(nullptr);
  }

  ReorderInfo_LayoutInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReorderInfo_LayoutInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReorderInfo_LayoutInfo& from);
  void MergeFrom(const ReorderInfo_LayoutInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderInfo_LayoutInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShuffleInfo.ReorderInfo.LayoutInfo";
  }
  protected:
  explicit ReorderInfo_LayoutInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 6,
    kBbSizeFieldNumber = 1,
    kTypeFieldNumber = 2,
    kBbFallthroughFieldNumber = 3,
    kSectionFieldNumber = 4,
    kSrcTypeFieldNumber = 5,
  };
  // optional string info = 6;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // optional uint32 bb_size = 1;
  bool has_bb_size() const;
  private:
  bool _internal_has_bb_size() const;
  public:
  void clear_bb_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 bb_size() const;
  void set_bb_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bb_size() const;
  void _internal_set_bb_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool bb_fallthrough = 3;
  bool has_bb_fallthrough() const;
  private:
  bool _internal_has_bb_fallthrough() const;
  public:
  void clear_bb_fallthrough();
  bool bb_fallthrough() const;
  void set_bb_fallthrough(bool value);
  private:
  bool _internal_bb_fallthrough() const;
  void _internal_set_bb_fallthrough(bool value);
  public:

  // optional uint32 section = 4;
  bool has_section() const;
  private:
  bool _internal_has_section() const;
  public:
  void clear_section();
  ::PROTOBUF_NAMESPACE_ID::uint32 section() const;
  void set_section(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_section() const;
  void _internal_set_section(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 src_type = 5;
  bool has_src_type() const;
  private:
  bool _internal_has_src_type() const;
  public:
  void clear_src_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 src_type() const;
  void set_src_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_src_type() const;
  void _internal_set_src_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ShuffleInfo.ReorderInfo.LayoutInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bb_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  bool bb_fallthrough_;
  ::PROTOBUF_NAMESPACE_ID::uint32 section_;
  ::PROTOBUF_NAMESPACE_ID::uint32 src_type_;
  friend struct ::TableStruct_shuffleInfo_2eproto;
};
// -------------------------------------------------------------------

class ReorderInfo_FixupInfo_FixupTuple PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple) */ {
 public:
  inline ReorderInfo_FixupInfo_FixupTuple() : ReorderInfo_FixupInfo_FixupTuple(nullptr) {}
  ~ReorderInfo_FixupInfo_FixupTuple() override;
  explicit constexpr ReorderInfo_FixupInfo_FixupTuple(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReorderInfo_FixupInfo_FixupTuple(const ReorderInfo_FixupInfo_FixupTuple& from);
  ReorderInfo_FixupInfo_FixupTuple(ReorderInfo_FixupInfo_FixupTuple&& from) noexcept
    : ReorderInfo_FixupInfo_FixupTuple() {
    *this = ::std::move(from);
  }

  inline ReorderInfo_FixupInfo_FixupTuple& operator=(const ReorderInfo_FixupInfo_FixupTuple& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReorderInfo_FixupInfo_FixupTuple& operator=(ReorderInfo_FixupInfo_FixupTuple&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReorderInfo_FixupInfo_FixupTuple& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReorderInfo_FixupInfo_FixupTuple* internal_default_instance() {
    return reinterpret_cast<const ReorderInfo_FixupInfo_FixupTuple*>(
               &_ReorderInfo_FixupInfo_FixupTuple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReorderInfo_FixupInfo_FixupTuple& a, ReorderInfo_FixupInfo_FixupTuple& b) {
    a.Swap(&b);
  }
  inline void Swap(ReorderInfo_FixupInfo_FixupTuple* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReorderInfo_FixupInfo_FixupTuple* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReorderInfo_FixupInfo_FixupTuple* New() const final {
    return CreateMaybeMessage<ReorderInfo_FixupInfo_FixupTuple>(nullptr);
  }

  ReorderInfo_FixupInfo_FixupTuple* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReorderInfo_FixupInfo_FixupTuple>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReorderInfo_FixupInfo_FixupTuple& from);
  void MergeFrom(const ReorderInfo_FixupInfo_FixupTuple& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderInfo_FixupInfo_FixupTuple* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple";
  }
  protected:
  explicit ReorderInfo_FixupInfo_FixupTuple(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 10,
    kOffsetFieldNumber = 1,
    kBaseBblSymFieldNumber = 3,
    kTypeFieldNumber = 2,
    kBaseSectionFieldNumber = 4,
    kTargetBblSymFieldNumber = 5,
    kTargetSectionFieldNumber = 6,
    kSectionFieldNumber = 7,
    kAddFieldNumber = 8,
    kStepFieldNumber = 9,
  };
  // optional string info = 10;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const std::string& info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);
  private:
  const std::string& _internal_info() const;
  void _internal_set_info(const std::string& value);
  std::string* _internal_mutable_info();
  public:

  // optional uint64 offset = 1;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 base_bbl_sym = 3;
  bool has_base_bbl_sym() const;
  private:
  bool _internal_has_base_bbl_sym() const;
  public:
  void clear_base_bbl_sym();
  ::PROTOBUF_NAMESPACE_ID::uint64 base_bbl_sym() const;
  void set_base_bbl_sym(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_base_bbl_sym() const;
  void _internal_set_base_bbl_sym(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 base_section = 4;
  bool has_base_section() const;
  private:
  bool _internal_has_base_section() const;
  public:
  void clear_base_section();
  ::PROTOBUF_NAMESPACE_ID::uint32 base_section() const;
  void set_base_section(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_base_section() const;
  void _internal_set_base_section(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 target_bbl_sym = 5;
  bool has_target_bbl_sym() const;
  private:
  bool _internal_has_target_bbl_sym() const;
  public:
  void clear_target_bbl_sym();
  ::PROTOBUF_NAMESPACE_ID::uint64 target_bbl_sym() const;
  void set_target_bbl_sym(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_target_bbl_sym() const;
  void _internal_set_target_bbl_sym(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 target_section = 6;
  bool has_target_section() const;
  private:
  bool _internal_has_target_section() const;
  public:
  void clear_target_section();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_section() const;
  void set_target_section(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_target_section() const;
  void _internal_set_target_section(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 section = 7;
  bool has_section() const;
  private:
  bool _internal_has_section() const;
  public:
  void clear_section();
  ::PROTOBUF_NAMESPACE_ID::uint32 section() const;
  void set_section(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_section() const;
  void _internal_set_section(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int64 add = 8;
  bool has_add() const;
  private:
  bool _internal_has_add() const;
  public:
  void clear_add();
  ::PROTOBUF_NAMESPACE_ID::int64 add() const;
  void set_add(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_add() const;
  void _internal_set_add(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional uint32 step = 9;
  bool has_step() const;
  private:
  bool _internal_has_step() const;
  public:
  void clear_step();
  ::PROTOBUF_NAMESPACE_ID::uint32 step() const;
  void set_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_step() const;
  void _internal_set_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 base_bbl_sym_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 base_section_;
  ::PROTOBUF_NAMESPACE_ID::uint64 target_bbl_sym_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_section_;
  ::PROTOBUF_NAMESPACE_ID::uint32 section_;
  ::PROTOBUF_NAMESPACE_ID::int64 add_;
  ::PROTOBUF_NAMESPACE_ID::uint32 step_;
  friend struct ::TableStruct_shuffleInfo_2eproto;
};
// -------------------------------------------------------------------

class ReorderInfo_FixupInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.ReorderInfo.FixupInfo) */ {
 public:
  inline ReorderInfo_FixupInfo() : ReorderInfo_FixupInfo(nullptr) {}
  ~ReorderInfo_FixupInfo() override;
  explicit constexpr ReorderInfo_FixupInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReorderInfo_FixupInfo(const ReorderInfo_FixupInfo& from);
  ReorderInfo_FixupInfo(ReorderInfo_FixupInfo&& from) noexcept
    : ReorderInfo_FixupInfo() {
    *this = ::std::move(from);
  }

  inline ReorderInfo_FixupInfo& operator=(const ReorderInfo_FixupInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReorderInfo_FixupInfo& operator=(ReorderInfo_FixupInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReorderInfo_FixupInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReorderInfo_FixupInfo* internal_default_instance() {
    return reinterpret_cast<const ReorderInfo_FixupInfo*>(
               &_ReorderInfo_FixupInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReorderInfo_FixupInfo& a, ReorderInfo_FixupInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReorderInfo_FixupInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReorderInfo_FixupInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReorderInfo_FixupInfo* New() const final {
    return CreateMaybeMessage<ReorderInfo_FixupInfo>(nullptr);
  }

  ReorderInfo_FixupInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReorderInfo_FixupInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReorderInfo_FixupInfo& from);
  void MergeFrom(const ReorderInfo_FixupInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderInfo_FixupInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShuffleInfo.ReorderInfo.FixupInfo";
  }
  protected:
  explicit ReorderInfo_FixupInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReorderInfo_FixupInfo_FixupTuple FixupTuple;

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kRodataFieldNumber = 2,
    kDataFieldNumber = 3,
    kDatarelFieldNumber = 4,
    kInitarrayFieldNumber = 5,
    kGotFieldNumber = 6,
    kInitFieldNumber = 7,
    kFiniFieldNumber = 8,
  };
  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple text = 1;
  int text_size() const;
  private:
  int _internal_text_size() const;
  public:
  void clear_text();
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_text(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_text();
  private:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& _internal_text(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _internal_add_text();
  public:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& text(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_text();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      text() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple rodata = 2;
  int rodata_size() const;
  private:
  int _internal_rodata_size() const;
  public:
  void clear_rodata();
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_rodata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_rodata();
  private:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& _internal_rodata(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _internal_add_rodata();
  public:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& rodata(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_rodata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      rodata() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_data();
  private:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& _internal_data(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _internal_add_data();
  public:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& data(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      data() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple datarel = 4;
  int datarel_size() const;
  private:
  int _internal_datarel_size() const;
  public:
  void clear_datarel();
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_datarel(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_datarel();
  private:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& _internal_datarel(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _internal_add_datarel();
  public:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& datarel(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_datarel();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      datarel() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple initarray = 5;
  int initarray_size() const;
  private:
  int _internal_initarray_size() const;
  public:
  void clear_initarray();
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_initarray(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_initarray();
  private:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& _internal_initarray(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _internal_add_initarray();
  public:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& initarray(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_initarray();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      initarray() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple got = 6;
  int got_size() const;
  private:
  int _internal_got_size() const;
  public:
  void clear_got();
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_got(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_got();
  private:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& _internal_got(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _internal_add_got();
  public:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& got(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_got();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      got() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple init = 7;
  int init_size() const;
  private:
  int _internal_init_size() const;
  public:
  void clear_init();
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_init(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_init();
  private:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& _internal_init(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _internal_add_init();
  public:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& init(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_init();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      init() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple fini = 8;
  int fini_size() const;
  private:
  int _internal_fini_size() const;
  public:
  void clear_fini();
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* mutable_fini(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
      mutable_fini();
  private:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& _internal_fini(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* _internal_add_fini();
  public:
  const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& fini(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* add_fini();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
      fini() const;

  // @@protoc_insertion_point(class_scope:ShuffleInfo.ReorderInfo.FixupInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > text_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > rodata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > datarel_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > initarray_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > got_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > init_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple > fini_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shuffleInfo_2eproto;
};
// -------------------------------------------------------------------

class ReorderInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShuffleInfo.ReorderInfo) */ {
 public:
  inline ReorderInfo() : ReorderInfo(nullptr) {}
  ~ReorderInfo() override;
  explicit constexpr ReorderInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReorderInfo(const ReorderInfo& from);
  ReorderInfo(ReorderInfo&& from) noexcept
    : ReorderInfo() {
    *this = ::std::move(from);
  }

  inline ReorderInfo& operator=(const ReorderInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReorderInfo& operator=(ReorderInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReorderInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReorderInfo* internal_default_instance() {
    return reinterpret_cast<const ReorderInfo*>(
               &_ReorderInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReorderInfo& a, ReorderInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReorderInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReorderInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReorderInfo* New() const final {
    return CreateMaybeMessage<ReorderInfo>(nullptr);
  }

  ReorderInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReorderInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReorderInfo& from);
  void MergeFrom(const ReorderInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShuffleInfo.ReorderInfo";
  }
  protected:
  explicit ReorderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReorderInfo_BinaryInfo BinaryInfo;
  typedef ReorderInfo_LayoutInfo LayoutInfo;
  typedef ReorderInfo_FixupInfo FixupInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kLayoutFieldNumber = 2,
    kFixupFieldNumber = 3,
    kBinFieldNumber = 1,
  };
  // repeated .ShuffleInfo.ReorderInfo.LayoutInfo layout = 2;
  int layout_size() const;
  private:
  int _internal_layout_size() const;
  public:
  void clear_layout();
  ::ShuffleInfo::ReorderInfo_LayoutInfo* mutable_layout(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_LayoutInfo >*
      mutable_layout();
  private:
  const ::ShuffleInfo::ReorderInfo_LayoutInfo& _internal_layout(int index) const;
  ::ShuffleInfo::ReorderInfo_LayoutInfo* _internal_add_layout();
  public:
  const ::ShuffleInfo::ReorderInfo_LayoutInfo& layout(int index) const;
  ::ShuffleInfo::ReorderInfo_LayoutInfo* add_layout();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_LayoutInfo >&
      layout() const;

  // repeated .ShuffleInfo.ReorderInfo.FixupInfo fixup = 3;
  int fixup_size() const;
  private:
  int _internal_fixup_size() const;
  public:
  void clear_fixup();
  ::ShuffleInfo::ReorderInfo_FixupInfo* mutable_fixup(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo >*
      mutable_fixup();
  private:
  const ::ShuffleInfo::ReorderInfo_FixupInfo& _internal_fixup(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo* _internal_add_fixup();
  public:
  const ::ShuffleInfo::ReorderInfo_FixupInfo& fixup(int index) const;
  ::ShuffleInfo::ReorderInfo_FixupInfo* add_fixup();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo >&
      fixup() const;

  // optional .ShuffleInfo.ReorderInfo.BinaryInfo bin = 1;
  bool has_bin() const;
  private:
  bool _internal_has_bin() const;
  public:
  void clear_bin();
  const ::ShuffleInfo::ReorderInfo_BinaryInfo& bin() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::ShuffleInfo::ReorderInfo_BinaryInfo* release_bin();
  ::ShuffleInfo::ReorderInfo_BinaryInfo* mutable_bin();
  void set_allocated_bin(::ShuffleInfo::ReorderInfo_BinaryInfo* bin);
  private:
  const ::ShuffleInfo::ReorderInfo_BinaryInfo& _internal_bin() const;
  ::ShuffleInfo::ReorderInfo_BinaryInfo* _internal_mutable_bin();
  public:
  void unsafe_arena_set_allocated_bin(
      ::ShuffleInfo::ReorderInfo_BinaryInfo* bin);
  ::ShuffleInfo::ReorderInfo_BinaryInfo* unsafe_arena_release_bin();

  // @@protoc_insertion_point(class_scope:ShuffleInfo.ReorderInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_LayoutInfo > layout_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo > fixup_;
  ::ShuffleInfo::ReorderInfo_BinaryInfo* bin_;
  friend struct ::TableStruct_shuffleInfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReorderInfo_BinaryInfo

// optional uint64 rand_obj_offset = 1;
inline bool ReorderInfo_BinaryInfo::_internal_has_rand_obj_offset() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReorderInfo_BinaryInfo::has_rand_obj_offset() const {
  return _internal_has_rand_obj_offset();
}
inline void ReorderInfo_BinaryInfo::clear_rand_obj_offset() {
  rand_obj_offset_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReorderInfo_BinaryInfo::_internal_rand_obj_offset() const {
  return rand_obj_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReorderInfo_BinaryInfo::rand_obj_offset() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.BinaryInfo.rand_obj_offset)
  return _internal_rand_obj_offset();
}
inline void ReorderInfo_BinaryInfo::_internal_set_rand_obj_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  rand_obj_offset_ = value;
}
inline void ReorderInfo_BinaryInfo::set_rand_obj_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_rand_obj_offset(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.BinaryInfo.rand_obj_offset)
}

// -------------------------------------------------------------------

// ReorderInfo_LayoutInfo

// optional uint32 bb_size = 1;
inline bool ReorderInfo_LayoutInfo::_internal_has_bb_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReorderInfo_LayoutInfo::has_bb_size() const {
  return _internal_has_bb_size();
}
inline void ReorderInfo_LayoutInfo::clear_bb_size() {
  bb_size_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_LayoutInfo::_internal_bb_size() const {
  return bb_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_LayoutInfo::bb_size() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.bb_size)
  return _internal_bb_size();
}
inline void ReorderInfo_LayoutInfo::_internal_set_bb_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  bb_size_ = value;
}
inline void ReorderInfo_LayoutInfo::set_bb_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bb_size(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.bb_size)
}

// optional uint32 type = 2;
inline bool ReorderInfo_LayoutInfo::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReorderInfo_LayoutInfo::has_type() const {
  return _internal_has_type();
}
inline void ReorderInfo_LayoutInfo::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_LayoutInfo::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_LayoutInfo::type() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.type)
  return _internal_type();
}
inline void ReorderInfo_LayoutInfo::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void ReorderInfo_LayoutInfo::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.type)
}

// optional bool bb_fallthrough = 3;
inline bool ReorderInfo_LayoutInfo::_internal_has_bb_fallthrough() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReorderInfo_LayoutInfo::has_bb_fallthrough() const {
  return _internal_has_bb_fallthrough();
}
inline void ReorderInfo_LayoutInfo::clear_bb_fallthrough() {
  bb_fallthrough_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ReorderInfo_LayoutInfo::_internal_bb_fallthrough() const {
  return bb_fallthrough_;
}
inline bool ReorderInfo_LayoutInfo::bb_fallthrough() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.bb_fallthrough)
  return _internal_bb_fallthrough();
}
inline void ReorderInfo_LayoutInfo::_internal_set_bb_fallthrough(bool value) {
  _has_bits_[0] |= 0x00000008u;
  bb_fallthrough_ = value;
}
inline void ReorderInfo_LayoutInfo::set_bb_fallthrough(bool value) {
  _internal_set_bb_fallthrough(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.bb_fallthrough)
}

// optional uint32 section = 4;
inline bool ReorderInfo_LayoutInfo::_internal_has_section() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ReorderInfo_LayoutInfo::has_section() const {
  return _internal_has_section();
}
inline void ReorderInfo_LayoutInfo::clear_section() {
  section_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_LayoutInfo::_internal_section() const {
  return section_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_LayoutInfo::section() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.section)
  return _internal_section();
}
inline void ReorderInfo_LayoutInfo::_internal_set_section(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  section_ = value;
}
inline void ReorderInfo_LayoutInfo::set_section(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_section(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.section)
}

// optional uint32 src_type = 5;
inline bool ReorderInfo_LayoutInfo::_internal_has_src_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ReorderInfo_LayoutInfo::has_src_type() const {
  return _internal_has_src_type();
}
inline void ReorderInfo_LayoutInfo::clear_src_type() {
  src_type_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_LayoutInfo::_internal_src_type() const {
  return src_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_LayoutInfo::src_type() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.src_type)
  return _internal_src_type();
}
inline void ReorderInfo_LayoutInfo::_internal_set_src_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  src_type_ = value;
}
inline void ReorderInfo_LayoutInfo::set_src_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_src_type(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.src_type)
}

// optional string info = 6;
inline bool ReorderInfo_LayoutInfo::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReorderInfo_LayoutInfo::has_info() const {
  return _internal_has_info();
}
inline void ReorderInfo_LayoutInfo::clear_info() {
  info_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReorderInfo_LayoutInfo::info() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.LayoutInfo.info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ReorderInfo_LayoutInfo::set_info(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.LayoutInfo.info)
}
inline std::string* ReorderInfo_LayoutInfo::mutable_info() {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.LayoutInfo.info)
  return _internal_mutable_info();
}
inline const std::string& ReorderInfo_LayoutInfo::_internal_info() const {
  return info_.Get();
}
inline void ReorderInfo_LayoutInfo::_internal_set_info(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ReorderInfo_LayoutInfo::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000001u;
  return info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReorderInfo_LayoutInfo::release_info() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.ReorderInfo.LayoutInfo.info)
  if (!_internal_has_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return info_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReorderInfo_LayoutInfo::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.ReorderInfo.LayoutInfo.info)
}

// -------------------------------------------------------------------

// ReorderInfo_FixupInfo_FixupTuple

// optional uint64 offset = 1;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_offset() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_offset() const {
  return _internal_has_offset();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReorderInfo_FixupInfo_FixupTuple::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReorderInfo_FixupInfo_FixupTuple::offset() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.offset)
  return _internal_offset();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  offset_ = value;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.offset)
}

// optional uint32 type = 2;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_type() const {
  return _internal_has_type();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_FixupInfo_FixupTuple::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_FixupInfo_FixupTuple::type() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.type)
  return _internal_type();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.type)
}

// optional uint64 base_bbl_sym = 3;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_base_bbl_sym() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_base_bbl_sym() const {
  return _internal_has_base_bbl_sym();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_base_bbl_sym() {
  base_bbl_sym_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReorderInfo_FixupInfo_FixupTuple::_internal_base_bbl_sym() const {
  return base_bbl_sym_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReorderInfo_FixupInfo_FixupTuple::base_bbl_sym() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.base_bbl_sym)
  return _internal_base_bbl_sym();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_base_bbl_sym(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  base_bbl_sym_ = value;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_base_bbl_sym(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_base_bbl_sym(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.base_bbl_sym)
}

// optional uint32 base_section = 4;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_base_section() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_base_section() const {
  return _internal_has_base_section();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_base_section() {
  base_section_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_FixupInfo_FixupTuple::_internal_base_section() const {
  return base_section_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_FixupInfo_FixupTuple::base_section() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.base_section)
  return _internal_base_section();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_base_section(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  base_section_ = value;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_base_section(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_base_section(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.base_section)
}

// optional uint64 target_bbl_sym = 5;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_target_bbl_sym() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_target_bbl_sym() const {
  return _internal_has_target_bbl_sym();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_target_bbl_sym() {
  target_bbl_sym_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReorderInfo_FixupInfo_FixupTuple::_internal_target_bbl_sym() const {
  return target_bbl_sym_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReorderInfo_FixupInfo_FixupTuple::target_bbl_sym() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.target_bbl_sym)
  return _internal_target_bbl_sym();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_target_bbl_sym(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  target_bbl_sym_ = value;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_target_bbl_sym(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_target_bbl_sym(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.target_bbl_sym)
}

// optional uint32 target_section = 6;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_target_section() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_target_section() const {
  return _internal_has_target_section();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_target_section() {
  target_section_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_FixupInfo_FixupTuple::_internal_target_section() const {
  return target_section_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_FixupInfo_FixupTuple::target_section() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.target_section)
  return _internal_target_section();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_target_section(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  target_section_ = value;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_target_section(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_target_section(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.target_section)
}

// optional uint32 section = 7;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_section() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_section() const {
  return _internal_has_section();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_section() {
  section_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_FixupInfo_FixupTuple::_internal_section() const {
  return section_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_FixupInfo_FixupTuple::section() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section)
  return _internal_section();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_section(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  section_ = value;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_section(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_section(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.section)
}

// optional int64 add = 8;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_add() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_add() const {
  return _internal_has_add();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_add() {
  add_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReorderInfo_FixupInfo_FixupTuple::_internal_add() const {
  return add_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReorderInfo_FixupInfo_FixupTuple::add() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.add)
  return _internal_add();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_add(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  add_ = value;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_add(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_add(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.add)
}

// optional uint32 step = 9;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_step() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_step() const {
  return _internal_has_step();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_step() {
  step_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_FixupInfo_FixupTuple::_internal_step() const {
  return step_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ReorderInfo_FixupInfo_FixupTuple::step() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.step)
  return _internal_step();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  step_ = value;
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.step)
}

// optional string info = 10;
inline bool ReorderInfo_FixupInfo_FixupTuple::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReorderInfo_FixupInfo_FixupTuple::has_info() const {
  return _internal_has_info();
}
inline void ReorderInfo_FixupInfo_FixupTuple::clear_info() {
  info_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReorderInfo_FixupInfo_FixupTuple::info() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.info)
  return _internal_info();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void ReorderInfo_FixupInfo_FixupTuple::set_info(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.info)
}
inline std::string* ReorderInfo_FixupInfo_FixupTuple::mutable_info() {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.info)
  return _internal_mutable_info();
}
inline const std::string& ReorderInfo_FixupInfo_FixupTuple::_internal_info() const {
  return info_.Get();
}
inline void ReorderInfo_FixupInfo_FixupTuple::_internal_set_info(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* ReorderInfo_FixupInfo_FixupTuple::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000001u;
  return info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReorderInfo_FixupInfo_FixupTuple::release_info() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.info)
  if (!_internal_has_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return info_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReorderInfo_FixupInfo_FixupTuple::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple.info)
}

// -------------------------------------------------------------------

// ReorderInfo_FixupInfo

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple text = 1;
inline int ReorderInfo_FixupInfo::_internal_text_size() const {
  return text_.size();
}
inline int ReorderInfo_FixupInfo::text_size() const {
  return _internal_text_size();
}
inline void ReorderInfo_FixupInfo::clear_text() {
  text_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.text)
  return text_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.text)
  return &text_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::_internal_text(int index) const {
  return text_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::text(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.text)
  return _internal_text(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::_internal_add_text() {
  return text_.Add();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_text() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.text)
  return _internal_add_text();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::text() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.text)
  return text_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple rodata = 2;
inline int ReorderInfo_FixupInfo::_internal_rodata_size() const {
  return rodata_.size();
}
inline int ReorderInfo_FixupInfo::rodata_size() const {
  return _internal_rodata_size();
}
inline void ReorderInfo_FixupInfo::clear_rodata() {
  rodata_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_rodata(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.rodata)
  return rodata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_rodata() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.rodata)
  return &rodata_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::_internal_rodata(int index) const {
  return rodata_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::rodata(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.rodata)
  return _internal_rodata(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::_internal_add_rodata() {
  return rodata_.Add();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_rodata() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.rodata)
  return _internal_add_rodata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::rodata() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.rodata)
  return rodata_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple data = 3;
inline int ReorderInfo_FixupInfo::_internal_data_size() const {
  return data_.size();
}
inline int ReorderInfo_FixupInfo::data_size() const {
  return _internal_data_size();
}
inline void ReorderInfo_FixupInfo::clear_data() {
  data_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.data)
  return &data_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::data(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.data)
  return _internal_data(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::_internal_add_data() {
  return data_.Add();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_data() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::data() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.data)
  return data_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple datarel = 4;
inline int ReorderInfo_FixupInfo::_internal_datarel_size() const {
  return datarel_.size();
}
inline int ReorderInfo_FixupInfo::datarel_size() const {
  return _internal_datarel_size();
}
inline void ReorderInfo_FixupInfo::clear_datarel() {
  datarel_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_datarel(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.datarel)
  return datarel_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_datarel() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.datarel)
  return &datarel_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::_internal_datarel(int index) const {
  return datarel_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::datarel(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.datarel)
  return _internal_datarel(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::_internal_add_datarel() {
  return datarel_.Add();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_datarel() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.datarel)
  return _internal_add_datarel();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::datarel() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.datarel)
  return datarel_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple initarray = 5;
inline int ReorderInfo_FixupInfo::_internal_initarray_size() const {
  return initarray_.size();
}
inline int ReorderInfo_FixupInfo::initarray_size() const {
  return _internal_initarray_size();
}
inline void ReorderInfo_FixupInfo::clear_initarray() {
  initarray_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_initarray(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.initarray)
  return initarray_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_initarray() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.initarray)
  return &initarray_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::_internal_initarray(int index) const {
  return initarray_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::initarray(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.initarray)
  return _internal_initarray(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::_internal_add_initarray() {
  return initarray_.Add();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_initarray() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.initarray)
  return _internal_add_initarray();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::initarray() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.initarray)
  return initarray_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple got = 6;
inline int ReorderInfo_FixupInfo::_internal_got_size() const {
  return got_.size();
}
inline int ReorderInfo_FixupInfo::got_size() const {
  return _internal_got_size();
}
inline void ReorderInfo_FixupInfo::clear_got() {
  got_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_got(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.got)
  return got_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_got() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.got)
  return &got_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::_internal_got(int index) const {
  return got_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::got(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.got)
  return _internal_got(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::_internal_add_got() {
  return got_.Add();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_got() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.got)
  return _internal_add_got();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::got() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.got)
  return got_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple init = 7;
inline int ReorderInfo_FixupInfo::_internal_init_size() const {
  return init_.size();
}
inline int ReorderInfo_FixupInfo::init_size() const {
  return _internal_init_size();
}
inline void ReorderInfo_FixupInfo::clear_init() {
  init_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_init(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.init)
  return init_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_init() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.init)
  return &init_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::_internal_init(int index) const {
  return init_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::init(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.init)
  return _internal_init(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::_internal_add_init() {
  return init_.Add();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_init() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.init)
  return _internal_add_init();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::init() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.init)
  return init_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo.FixupTuple fini = 8;
inline int ReorderInfo_FixupInfo::_internal_fini_size() const {
  return fini_.size();
}
inline int ReorderInfo_FixupInfo::fini_size() const {
  return _internal_fini_size();
}
inline void ReorderInfo_FixupInfo::clear_fini() {
  fini_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::mutable_fini(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.FixupInfo.fini)
  return fini_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >*
ReorderInfo_FixupInfo::mutable_fini() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.FixupInfo.fini)
  return &fini_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::_internal_fini(int index) const {
  return fini_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple& ReorderInfo_FixupInfo::fini(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.FixupInfo.fini)
  return _internal_fini(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::_internal_add_fini() {
  return fini_.Add();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple* ReorderInfo_FixupInfo::add_fini() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.FixupInfo.fini)
  return _internal_add_fini();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo_FixupTuple >&
ReorderInfo_FixupInfo::fini() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.FixupInfo.fini)
  return fini_;
}

// -------------------------------------------------------------------

// ReorderInfo

// optional .ShuffleInfo.ReorderInfo.BinaryInfo bin = 1;
inline bool ReorderInfo::_internal_has_bin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || bin_ != nullptr);
  return value;
}
inline bool ReorderInfo::has_bin() const {
  return _internal_has_bin();
}
inline void ReorderInfo::clear_bin() {
  if (bin_ != nullptr) bin_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ShuffleInfo::ReorderInfo_BinaryInfo& ReorderInfo::_internal_bin() const {
  const ::ShuffleInfo::ReorderInfo_BinaryInfo* p = bin_;
  return p != nullptr ? *p : reinterpret_cast<const ::ShuffleInfo::ReorderInfo_BinaryInfo&>(
      ::ShuffleInfo::_ReorderInfo_BinaryInfo_default_instance_);
}
inline const ::ShuffleInfo::ReorderInfo_BinaryInfo& ReorderInfo::bin() const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.bin)
  return _internal_bin();
}
inline void ReorderInfo::unsafe_arena_set_allocated_bin(
    ::ShuffleInfo::ReorderInfo_BinaryInfo* bin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bin_);
  }
  bin_ = bin;
  if (bin) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ShuffleInfo.ReorderInfo.bin)
}
inline ::ShuffleInfo::ReorderInfo_BinaryInfo* ReorderInfo::release_bin() {
  _has_bits_[0] &= ~0x00000001u;
  ::ShuffleInfo::ReorderInfo_BinaryInfo* temp = bin_;
  bin_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ShuffleInfo::ReorderInfo_BinaryInfo* ReorderInfo::unsafe_arena_release_bin() {
  // @@protoc_insertion_point(field_release:ShuffleInfo.ReorderInfo.bin)
  _has_bits_[0] &= ~0x00000001u;
  ::ShuffleInfo::ReorderInfo_BinaryInfo* temp = bin_;
  bin_ = nullptr;
  return temp;
}
inline ::ShuffleInfo::ReorderInfo_BinaryInfo* ReorderInfo::_internal_mutable_bin() {
  _has_bits_[0] |= 0x00000001u;
  if (bin_ == nullptr) {
    auto* p = CreateMaybeMessage<::ShuffleInfo::ReorderInfo_BinaryInfo>(GetArena());
    bin_ = p;
  }
  return bin_;
}
inline ::ShuffleInfo::ReorderInfo_BinaryInfo* ReorderInfo::mutable_bin() {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.bin)
  return _internal_mutable_bin();
}
inline void ReorderInfo::set_allocated_bin(::ShuffleInfo::ReorderInfo_BinaryInfo* bin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bin_;
  }
  if (bin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bin);
    if (message_arena != submessage_arena) {
      bin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bin, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bin_ = bin;
  // @@protoc_insertion_point(field_set_allocated:ShuffleInfo.ReorderInfo.bin)
}

// repeated .ShuffleInfo.ReorderInfo.LayoutInfo layout = 2;
inline int ReorderInfo::_internal_layout_size() const {
  return layout_.size();
}
inline int ReorderInfo::layout_size() const {
  return _internal_layout_size();
}
inline void ReorderInfo::clear_layout() {
  layout_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_LayoutInfo* ReorderInfo::mutable_layout(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.layout)
  return layout_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_LayoutInfo >*
ReorderInfo::mutable_layout() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.layout)
  return &layout_;
}
inline const ::ShuffleInfo::ReorderInfo_LayoutInfo& ReorderInfo::_internal_layout(int index) const {
  return layout_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_LayoutInfo& ReorderInfo::layout(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.layout)
  return _internal_layout(index);
}
inline ::ShuffleInfo::ReorderInfo_LayoutInfo* ReorderInfo::_internal_add_layout() {
  return layout_.Add();
}
inline ::ShuffleInfo::ReorderInfo_LayoutInfo* ReorderInfo::add_layout() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.layout)
  return _internal_add_layout();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_LayoutInfo >&
ReorderInfo::layout() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.layout)
  return layout_;
}

// repeated .ShuffleInfo.ReorderInfo.FixupInfo fixup = 3;
inline int ReorderInfo::_internal_fixup_size() const {
  return fixup_.size();
}
inline int ReorderInfo::fixup_size() const {
  return _internal_fixup_size();
}
inline void ReorderInfo::clear_fixup() {
  fixup_.Clear();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo* ReorderInfo::mutable_fixup(int index) {
  // @@protoc_insertion_point(field_mutable:ShuffleInfo.ReorderInfo.fixup)
  return fixup_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo >*
ReorderInfo::mutable_fixup() {
  // @@protoc_insertion_point(field_mutable_list:ShuffleInfo.ReorderInfo.fixup)
  return &fixup_;
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo& ReorderInfo::_internal_fixup(int index) const {
  return fixup_.Get(index);
}
inline const ::ShuffleInfo::ReorderInfo_FixupInfo& ReorderInfo::fixup(int index) const {
  // @@protoc_insertion_point(field_get:ShuffleInfo.ReorderInfo.fixup)
  return _internal_fixup(index);
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo* ReorderInfo::_internal_add_fixup() {
  return fixup_.Add();
}
inline ::ShuffleInfo::ReorderInfo_FixupInfo* ReorderInfo::add_fixup() {
  // @@protoc_insertion_point(field_add:ShuffleInfo.ReorderInfo.fixup)
  return _internal_add_fixup();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ShuffleInfo::ReorderInfo_FixupInfo >&
ReorderInfo::fixup() const {
  // @@protoc_insertion_point(field_list:ShuffleInfo.ReorderInfo.fixup)
  return fixup_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ShuffleInfo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_shuffleInfo_2eproto
